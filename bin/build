#!/usr/bin/env node

/**************************************************************************************************
 * helm                                                                                        *
 * Copyright (C) 2020 HOOBS                                                                       *
 *                                                                                                *
 * This program is free software: you can redistribute it and/or modify                           *
 * it under the terms of the GNU General Public License as published by                           *
 * the Free Software Foundation, either version 3 of the License, or                              *
 * (at your option) any later version.                                                            *
 *                                                                                                *
 * This program is distributed in the hope that it will be useful,                                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                                 *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  *
 * GNU General Public License for more details.                                                   *
 *                                                                                                *
 * You should have received a copy of the GNU General Public License                              *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.                          *
 **************************************************************************************************/

const Program = require("commander");
const { join } = require("path");
const { execSync } = require("child_process");

const {
    existsSync,
    mkdirSync,
    unlinkSync,
    readFileSync,
    writeFileSync,
    copyFileSync,
    moveSync,
    copySync,
} = require("fs-extra");

const root = join(__dirname, "../");
const pjson = JSON.parse(readFileSync(join(root, "package.json")).toString());

Program.version(pjson.version, "-v, --version", "output the current version")
    .allowUnknownOption();

Program.command("helm", { isDefault: true })
    .description("build helm")
    .option("-l, --lint", "lint the code before building")
    .option("-p, --pack", "create pack file for offline testing")
    .action((command) => {
        if (command.lint) execSync(`${join(root, "node_modules", ".bin", "eslint")} 'src/**/*.ts'`, { cwd: root, stdio: "inherit" });
        if (existsSync(join(root, "lib"))) execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "lib")}`, { cwd: root, stdio: "inherit" });

        mkdirSync(join(root, "lib"));
        mkdirSync(join(root, "lib/helm"));

        execSync(`${join(root, "node_modules", ".bin", "tsc")}`, { cwd: root, stdio: "inherit" });

        copySync(join(root, "var"), join(root, "lib/helm/static"));

        if (command.pack) {
            if (!existsSync(join(root, "builds"))) mkdirSync(join(root, "builds"));
            if (existsSync(join(root, "dist"))) execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "dist")}`, { cwd: root, stdio: "inherit" });

            mkdirSync(join(root, "dist"));
            mkdirSync(join(root, "dist/usr"));
            mkdirSync(join(root, "dist/usr/bin"));
            mkdirSync(join(root, "dist/etc"));
            mkdirSync(join(root, "dist/etc/systemd/"));
            mkdirSync(join(root, "dist/etc/systemd/system"));

            copyFileSync(join(root, "bin", "helm"), join(root, "dist/usr/bin", "helm"));
            copySync(join(root, "lib"), join(root, "dist/usr/lib"));

            delete pjson.scripts;
            delete pjson.devDependencies;

            pjson.main = "cli.js";

            writeFileSync(join(root, "dist/usr/lib/helm", "package.json"), JSON.stringify(pjson, null, 4));

            execSync(`chmod 755 ${join(root, "dist/usr/bin", "helm")}`, { cwd: root, stdio: "inherit" });
            execSync(`tar -zcf ../helm-v${pjson.version}.tar.gz .`, { cwd: join(root, "dist/usr"), stdio: "inherit" });

            if (!existsSync(join(root, "builds"))) mkdirSync(join(root, "builds"));
            if (existsSync(join(root, "builds", `helm-v${pjson.version}.tar.gz`))) unlinkSync(join(root, "builds", `helm-v${pjson.version}.tar.gz`));

            moveSync(join(root, "dist", `helm-v${pjson.version}.tar.gz`), join(root, "builds", `helm-v${pjson.version}.tar.gz`));
            copyFileSync(join(root, "helm.service"), join(root, "dist/etc/systemd/system", "helm.service"));
            mkdirSync(join(root, "dist/DEBIAN"));

            let control = "";

            control += "Package: helm\n";
            control += `Version: ${pjson.version}\n`;
            control += "Section: base\n";
            control += "Priority: optional\n";
            control += "Architecture: all\n";
            control += "Installed-Size: 65\n";
            control += "Depends: nodejs (>= 14.15.0), yarn (>= 1.22.0), libpam-dev, python3, make, gcc, g++\n";
            control += "Maintainer: HOOBS Maintainers <info@hoobs.org>\n";
            control += "Homepage: https://hoobs.org\n";
            control += "Description: Recovery and remote console for the Raspberry Pi.\n";

            writeFileSync(join(root, "dist/DEBIAN/control"), control);
            copyFileSync(join(root, "bin", "postinst"), join(root, "dist/DEBIAN", "postinst"));
            execSync(`chmod 755 ${join(root, "dist/DEBIAN", "postinst")}`, { cwd: root, stdio: "inherit" });
            execSync("dpkg-deb --build dist", { cwd: root, stdio: "inherit" });

            if (existsSync(join(root, "builds", `helm-v${pjson.version}.deb`))) unlinkSync(join(root, "builds", `helm-v${pjson.version}.deb`));

            moveSync(join(root, "dist.deb"), join(root, "builds", `helm-v${pjson.version}.deb`));
            execSync(`dpkg-sig --sign builder ${join(root, "builds", `helm-v${pjson.version}.deb`)}`, { cwd: root, stdio: "inherit" });

            if (existsSync(join(root, "dist"))) execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "dist")}`, { cwd: root, stdio: "inherit" });
        }
    });

Program.parse(process.argv);
